/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:stackwallet/notifications/show_flush_bar.dart';
import 'package:stackwallet/providers/global/debug_service_provider.dart';
import 'package:stackwallet/providers/providers.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/assets.dart';
import 'package:stackwallet/utilities/constants.dart';
import 'package:stackwallet/utilities/enums/coin_enum.dart';
import 'package:stackwallet/utilities/text_styles.dart';
import 'package:stackwallet/widgets/background.dart';
import 'package:stackwallet/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:stackwallet/widgets/dialogs/tor_warning_dialog.dart';
import 'package:stackwallet/widgets/rounded_white_container.dart';

class HiddenSettings extends StatelessWidget {
  const HiddenSettings({super.key});

  static const String routeName = "/hiddenSettings";

  @override
  Widget build(BuildContext context) {
    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: Padding(
            padding: const EdgeInsets.all(8.0),
            child: AppBarIconButton(
              size: 32,
              color: Theme.of(context)
                  .extension<StackColors>()!
                  .textFieldDefaultBG,
              shadows: const [],
              icon: SvgPicture.asset(
                Assets.svg.arrowLeft,
                width: 18,
                height: 18,
                color: Theme.of(context)
                    .extension<StackColors>()!
                    .topNavIconPrimary,
              ),
              onPressed: Navigator.of(context).pop,
            ),
          ),
          title: Text(
            "Dev options",
            style: STextStyles.navBarTitle(context),
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: LayoutBuilder(
            builder: (context, constraints) {
              return SingleChildScrollView(
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    minHeight: constraints.maxHeight,
                  ),
                  child: IntrinsicHeight(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              final notifs =
                                  ref.read(notificationsProvider).notifications;

                              for (final n in notifs) {
                                await ref
                                    .read(notificationsProvider)
                                    .delete(n, false);
                              }
                              await ref
                                  .read(notificationsProvider)
                                  .delete(notifs[0], true);

                              if (context.mounted) {
                                unawaited(
                                  showFloatingFlushBar(
                                    type: FlushBarType.success,
                                    message: "Notification history deleted",
                                    context: context,
                                  ),
                                );
                              }
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Delete notifications",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       final trades =
                        //           ref.read(tradesServiceProvider).trades;
                        //
                        //       for (final trade in trades) {
                        //         ref.read(tradesServiceProvider).delete(
                        //             trade: trade, shouldNotifyListeners: false);
                        //       }
                        //       ref.read(tradesServiceProvider).delete(
                        //           trade: trades[0], shouldNotifyListeners: true);
                        //
                        //       // ref.read(notificationsProvider).DELETE_EVERYTHING();
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Delete trade history",
                        //         style: STextStyles.button(context).copyWith(
                        //           color: Theme.of(context).extension<StackColors>()!.accentColorDark
                        //         ),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(builder: (_, ref, __) {
                          return GestureDetector(
                            onTap: () async {
                              await ref
                                  .read(debugServiceProvider)
                                  .deleteAllLogs();

                              if (context.mounted) {
                                unawaited(
                                  showFloatingFlushBar(
                                    type: FlushBarType.success,
                                    message: "Debug Logs deleted",
                                    context: context,
                                  ),
                                );
                              }
                            },
                            child: RoundedWhiteContainer(
                              child: Text(
                                "Delete Debug Logs",
                                style: STextStyles.button(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          );
                        }),
                        const SizedBox(
                          height: 12,
                        ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       await showOneTimeTorHasBeenAddedDialogIfRequired(
                        //         context,
                        //       );
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Test tor stacy popup",
                        //         style: STextStyles.button(context).copyWith(
                        //             color: Theme.of(context)
                        //                 .extension<StackColors>()!
                        //                 .accentColorDark),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        // Consumer(builder: (_, ref, __) {
                        //   return GestureDetector(
                        //     onTap: () async {
                        //       final box = await Hive.openBox<bool>(
                        //           DB.boxNameOneTimeDialogsShown);
                        //       await box.clear();
                        //     },
                        //     child: RoundedWhiteContainer(
                        //       child: Text(
                        //         "Reset tor stacy popup",
                        //         style: STextStyles.button(context).copyWith(
                        //             color: Theme.of(context)
                        //                 .extension<StackColors>()!
                        //                 .accentColorDark),
                        //       ),
                        //     ),
                        //   );
                        // }),
                        // const SizedBox(
                        //   height: 12,
                        // ),
                        Consumer(
                          builder: (_, ref, __) {
                            if (ref.watch(prefsChangeNotifierProvider
                                    .select((value) => value.familiarity)) <
                                6) {
                              return GestureDetector(
                                onTap: () async {
                                  final familiarity = ref
                                      .read(prefsChangeNotifierProvider)
                                      .familiarity;
                                  if (familiarity < 6) {
                                    ref
                                        .read(prefsChangeNotifierProvider)
                                        .familiarity = 6;

                                    Constants.exchangeForExperiencedUsers(6);
                                  }
                                },
                                child: RoundedWhiteContainer(
                                  child: Text(
                                    "Enable exchange",
                                    style: STextStyles.button(context).copyWith(
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .accentColorDark),
                                  ),
                                ),
                              );
                            } else {
                              return Container();
                            }
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                await showDialog<bool>(
                                  context: context,
                                  builder: (_) => TorWarningDialog(
                                    coin: Coin.stellar,
                                  ),
                                );
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Show Tor warning popup",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                ref
                                        .read(prefsChangeNotifierProvider)
                                        .solanaEnabled =
                                    !(ref
                                        .read(prefsChangeNotifierProvider)
                                        .solanaEnabled);
                                if (kDebugMode) {
                                  print(
                                      "Solana enabled: ${ref.read(prefsChangeNotifierProvider).solanaEnabled}");
                                }
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Toggle Solana",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Consumer(
                          builder: (_, ref, __) {
                            return GestureDetector(
                              onTap: () async {
                                //
                              },
                              child: RoundedWhiteContainer(
                                child: Text(
                                  "Do nothing",
                                  style: STextStyles.button(context).copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .accentColorDark),
                                ),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}
